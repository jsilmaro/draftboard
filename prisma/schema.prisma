generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id              String           @id @default(cuid())
  companyName     String
  contactName     String
  email           String           @unique
  password        String
  phoneCountry    String?
  phoneNumber     String?
  addressStreet   String?
  addressCity     String?
  addressState    String?
  addressZip      String?
  addressCountry  String?
  socialInstagram String?
  socialTwitter   String?
  socialLinkedIn  String?
  socialWebsite   String?
  paymentMethod   String?
  cardNumber      String?
  cardType        String?
  bankName        String?
  bankAccountType String?
  bankRouting     String?
  bankAccount     String?
  logo            String?
  isVerified      Boolean          @default(false)
  termsAccepted   Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  awardDrafts     AwardDraft[]
  wallet          BrandWallet?
  briefs          Brief[]
  publishedAwards PublishedAward[]
  successStories  SuccessStory[]

  @@index([email])
  @@index([createdAt])
}

model Creator {
  id                 String              @id @default(cuid())
  userName           String              @unique
  email              String              @unique
  password           String
  fullName           String
  phoneCountry       String?
  phoneNumber        String?
  addressStreet      String?
  addressCity        String?
  addressState       String?
  addressZip         String?
  addressCountry     String?
  socialInstagram    String?
  socialTwitter      String?
  socialLinkedIn     String?
  socialTikTok       String?
  socialYouTube      String?
  paymentMethod      String?
  cardNumber         String?
  cardType           String?
  bankName           String?
  bankAccountType    String?
  bankRouting        String?
  bankAccount        String?
  paypalEmail        String?
  isVerified         Boolean             @default(false)
  termsAccepted      Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  wallet             CreatorWallet?
  submissions        Submission[]
  winners            Winner[]
  withdrawalRequests WithdrawalRequest[]
  successStories     SuccessStory[]

  @@index([email])
  @@index([userName])
  @@index([createdAt])
}

model Brief {
  id               String           @id @default(cuid())
  title            String
  description      String
  requirements     String
  reward           Float
  deadline         DateTime
  status           String           @default("draft")
  isPrivate        Boolean          @default(false)
  additionalFields String?
  brandId          String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  closedAt         DateTime?
  archivedAt       DateTime?
  amountOfWinners  Int              @default(1)
  winnersSelected  Boolean          @default(false)
  location         String?
  totalRewardsPaid Float            @default(0)
  awardDrafts      AwardDraft[]
  brand            Brand            @relation(fields: [brandId], references: [id])
  publishedAwards  PublishedAward[]
  rewardPool       RewardPool?
  submissions      Submission[]
  winners          Winner[]
  winnerRewards    WinnerReward[]
}

model Submission {
  id          String    @id @default(cuid())
  briefId     String
  creatorId   String
  content     String
  files       String?
  amount      Float
  status      String    @default("pending")
  submittedAt DateTime  @default(now())
  reviewedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  brief       Brief     @relation(fields: [briefId], references: [id])
  creator     Creator   @relation(fields: [creatorId], references: [id])
  winner      Winner?
}

model AwardDraft {
  id          String   @id @default(cuid())
  briefId     String
  brandId     String
  rewardTiers String
  savedAt     DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brand       Brand    @relation(fields: [brandId], references: [id])
  brief       Brief    @relation(fields: [briefId], references: [id])
}

model PublishedAward {
  id          String   @id @default(cuid())
  briefId     String
  brandId     String
  rewardTiers String
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brand       Brand    @relation(fields: [brandId], references: [id])
  brief       Brief    @relation(fields: [briefId], references: [id])
}

model Admin {
  id            String              @id @default(cuid())
  email         String              @unique
  password      String
  fullName      String
  isActive      Boolean             @default(true)
  role          String              @default("admin") // admin, super_admin
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  auditLogs     AuditLog[]
  notifications AdminNotification[]

  @@index([email])
  @@index([role])
}

model AuditLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String // VIEW_BRAND, DELETE_BRAND, etc.
  details    String // Detailed description of the action
  targetType String? // brand, creator, brief, submission, etc.
  targetId   String? // ID of the target object
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  admin      Admin    @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([action])
  @@index([targetType])
  @@index([timestamp])
}

model AdminNotification {
  id        String    @id @default(cuid())
  adminId   String
  title     String
  message   String
  type      String // info, warning, error, success
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  admin     Admin     @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([isRead])
  @@index([createdAt])
}

model Winner {
  id           String        @id @default(cuid())
  briefId      String
  submissionId String        @unique
  creatorId    String
  position     Int
  selectedAt   DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  rewardId     String?       @unique
  payment      Payment?
  brief        Brief         @relation(fields: [briefId], references: [id])
  creator      Creator       @relation(fields: [creatorId], references: [id])
  reward       WinnerReward? @relation(fields: [rewardId], references: [id])
  submission   Submission    @relation(fields: [submissionId], references: [id])
}

model WinnerReward {
  id               String    @id @default(cuid())
  briefId          String
  position         Int
  cashAmount       Float     @default(0)
  creditAmount     Float     @default(0)
  prizeDescription String?
  calculatedAmount Float     @default(0) // The calculated amount for this position
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isPaid           Boolean   @default(false)
  paidAt           DateTime?
  winner           Winner?
  brief            Brief     @relation(fields: [briefId], references: [id])
}

model Notification {
  id                String                 @id @default(cuid())
  userId            String
  userType          String
  title             String
  message           String
  type              String
  category          String                 @default("general")
  priority          String                 @default("normal")
  isRead            Boolean                @default(false)
  readAt            DateTime?
  dismissedAt       DateTime?
  expiresAt         DateTime?
  actionUrl         String?
  actionText        String?
  metadata          Json?
  relatedEntityType String?
  relatedEntityId   String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  deliveries        NotificationDelivery[]

  @@index([userId, userType])
  @@index([isRead])
  @@index([createdAt])
  @@index([category])
  @@index([priority])
  @@index([readAt])
  @@index([dismissedAt])
  @@index([expiresAt])
  @@index([relatedEntityType, relatedEntityId])
  @@index([userType, category])
  @@index([userId, isRead])
}

model NotificationPreferences {
  id                 String   @id @default(cuid())
  userId             String
  userType           String
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  inAppNotifications Boolean  @default(true)
  categories         Json     @default("{\"system\": true, \"brief\": true, \"submission\": true, \"payment\": true, \"wallet\": true, \"invitation\": true, \"security\": true, \"reward\": true, \"winner\": true, \"general\": true}")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, userType])
  @@index([userId, userType])
}

model NotificationTemplate {
  id                String   @id @default(cuid())
  name              String   @unique
  type              String
  category          String
  titleTemplate     String
  messageTemplate   String
  actionText        String?
  actionUrlTemplate String?
  priority          String   @default("normal")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([type])
  @@index([category])
  @@index([isActive])
}

model NotificationDelivery {
  id             String       @id @default(cuid())
  notificationId String
  deliveryMethod String
  status         String
  deliveredAt    DateTime?
  errorMessage   String?
  createdAt      DateTime     @default(now())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([status])
  @@index([deliveredAt])
}

model Payment {
  id                    String    @id @default(cuid())
  winnerId              String    @unique
  amount                Float
  currency              String    @default("USD")
  paymentMethod         String
  rewardType            String
  status                String    @default("pending")
  stripePaymentIntentId String?
  stripeTransferId      String?
  paidAt                DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  winner                Winner    @relation(fields: [winnerId], references: [id])
}

model CreatorWallet {
  id             String              @id @default(cuid())
  creatorId      String              @unique
  balance        Float               @default(0)
  totalEarned    Float               @default(0)
  totalWithdrawn Float               @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  creator        Creator             @relation(fields: [creatorId], references: [id])
  transactions   WalletTransaction[]
}

model WalletTransaction {
  id            String        @id @default(cuid())
  walletId      String
  type          String
  amount        Float
  description   String
  referenceId   String?
  balanceBefore Float
  balanceAfter  Float
  createdAt     DateTime      @default(now())
  wallet        CreatorWallet @relation(fields: [walletId], references: [id])
}

model BrandWallet {
  id             String                   @id @default(cuid())
  brandId        String                   @unique
  balance        Float                    @default(0)
  totalSpent     Float                    @default(0)
  totalDeposited Float                    @default(0)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  brand          Brand                    @relation(fields: [brandId], references: [id])
  transactions   BrandWalletTransaction[]
}

model BrandWalletTransaction {
  id            String      @id @default(cuid())
  walletId      String
  type          String
  amount        Float
  description   String
  referenceId   String?
  balanceBefore Float
  balanceAfter  Float
  createdAt     DateTime    @default(now())
  wallet        BrandWallet @relation(fields: [walletId], references: [id])
}

model RewardPool {
  id              String   @id @default(cuid())
  briefId         String   @unique
  totalAmount     Float
  remainingAmount Float
  status          String   @default("active")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  brief           Brief    @relation(fields: [briefId], references: [id])

  @@index([status])
  @@index([createdAt])
}

model Transaction {
  id                    String   @id @default(cuid())
  userId                String
  userType              String
  type                  String
  amount                Float
  stripePaymentIntentId String?
  stripeTransferId      String?
  status                String   @default("pending")
  createdAt             DateTime @default(now())

  @@index([userId, userType])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model WithdrawalRequest {
  id               String    @id @default(cuid())
  creatorId        String
  amount           Float
  currency         String    @default("USD")
  status           String    @default("pending") // pending, approved, rejected, completed
  reason           String? // Optional reason for rejection
  adminNotes       String? // Admin notes
  stripeTransferId String? // Stripe transfer ID when processed
  requestedAt      DateTime  @default(now())
  processedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  creator          Creator   @relation(fields: [creatorId], references: [id])

  @@index([status])
  @@index([creatorId])
  @@index([requestedAt])
}

model Conversation {
  id               String   @id @default(cuid())
  participant1Id   String
  participant2Id   String
  participant1Type String // 'brand' or 'creator'
  participant2Type String // 'brand' or 'creator'
  lastMessageAt    DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  messages Message[]

  @@unique([participant1Id, participant2Id])
  @@index([participant1Id])
  @@index([participant2Id])
  @@index([lastMessageAt])
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String
  senderType     String // 'brand' or 'creator'
  receiverType   String // 'brand' or 'creator'
  content        String
  type           MessageType @default(TEXT)
  fileName       String?
  fileUrl        String?
  fileSize       Int?
  isRead         Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  VIDEO
}

// Community and Events Models
model Event {
  id               String   @id @default(cuid())
  title            String
  description      String
  type             String // webinar, workshop, networking, conference
  category         String // education, networking, business, creative, technical
  hostId           String
  date             DateTime
  time             String
  duration         String
  timezone         String
  maxAttendees     Int
  currentAttendees Int      @default(0)
  price            Float    @default(0)
  currency         String   @default("USD")
  isFree           Boolean  @default(true)
  isLive           Boolean  @default(false)
  isRecorded       Boolean  @default(false)
  recordingUrl     String?
  meetingUrl       String?
  tags             String[]
  requirements     String[]
  learningOutcomes String[]
  agenda           Json     @default("[]")
  featured         Boolean  @default(false)
  status           String   @default("upcoming") // upcoming, live, completed, cancelled
  views            Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  host      User                @relation(fields: [hostId], references: [id])
  attendees EventRegistration[]

  @@index([date])
  @@index([status])
  @@index([type])
  @@index([category])
  @@index([featured])
}

model EventRegistration {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model ForumPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  category  String // tips, networking, support, general
  tags      String[]
  likes     Int      @default(0)
  replies   Int      @default(0)
  views     Int      @default(0)
  isPinned  Boolean  @default(false)
  isLocked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author       User            @relation(fields: [authorId], references: [id])
  forumReplies ForumReply[]
  forumLikes   ForumPostLike[]

  @@index([category])
  @@index([isPinned])
  @@index([createdAt])
  @@index([authorId])
}

model ForumReply {
  id         String   @id @default(cuid())
  postId     String
  authorId   String
  content    String
  likes      Int      @default(0)
  isSolution Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  post       ForumPost        @relation(fields: [postId], references: [id], onDelete: Cascade)
  author     User             @relation(fields: [authorId], references: [id])
  forumLikes ForumReplyLike[]

  @@index([postId])
  @@index([authorId])
  @@index([createdAt])
}

model ForumPostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model ForumReplyLike {
  id        String   @id @default(cuid())
  replyId   String
  userId    String
  createdAt DateTime @default(now())

  reply ForumReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([replyId, userId])
  @@index([replyId])
  @@index([userId])
}

model SuccessStory {
  id          String   @id @default(cuid())
  title       String
  description String
  briefTitle  String
  brandId     String
  creatorId   String
  category    String // creative, technical, business
  budget      Float
  duration    String
  outcome     String
  metrics     Json     @default("{}")
  testimonial Json     @default("{}")
  images      String[]
  tags        String[]
  featured    Boolean  @default(false)
  verified    Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  brand   Brand   @relation(fields: [brandId], references: [id])
  creator Creator @relation(fields: [creatorId], references: [id])

  @@index([category])
  @@index([featured])
  @@index([verified])
  @@index([createdAt])
}

// Unified User model for events and forums
model User {
  id        String   @id @default(cuid())
  name      String
  type      String // brand, creator, platform
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  hostedEvents       Event[]
  eventRegistrations EventRegistration[]
  forumPosts         ForumPost[]
  forumReplies       ForumReply[]
  forumPostLikes     ForumPostLike[]
  forumReplyLikes    ForumReplyLike[]

  @@index([type])
  @@index([name])
}
