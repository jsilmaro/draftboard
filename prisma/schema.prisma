generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id              String           @id @default(cuid())
  companyName     String
  contactName     String
  email           String           @unique
  password        String
  phoneCountry    String?
  phoneNumber     String?
  addressStreet   String?
  addressCity     String?
  addressState    String?
  addressZip      String?
  addressCountry  String?
  socialInstagram String?
  socialTwitter   String?
  socialLinkedIn  String?
  socialWebsite   String?
  paymentMethod   String?
  cardNumber      String?
  cardType        String?
  bankName        String?
  bankAccountType String?
  bankRouting     String?
  bankAccount     String?
  logo            String?
  isVerified      Boolean          @default(false)
  termsAccepted   Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  awardDrafts     AwardDraft[]
  wallet          BrandWallet?
  briefs          Brief[]
  publishedAwards PublishedAward[]
  successStories  SuccessStory[]
  briefFundings   BriefFunding[]
  briefRefunds    BriefRefund[]

  @@index([email])
  @@index([createdAt])
}

model Creator {
  id                 String              @id @default(cuid())
  userName           String              @unique
  email              String              @unique
  password           String
  fullName           String
  phoneCountry       String?
  phoneNumber        String?
  addressStreet      String?
  addressCity        String?
  addressState       String?
  addressZip         String?
  addressCountry     String?
  socialInstagram    String?
  socialTwitter      String?
  socialLinkedIn     String?
  socialTikTok       String?
  socialYouTube      String?
  paymentMethod      String?
  cardNumber         String?
  cardType           String?
  bankName           String?
  bankAccountType    String?
  bankRouting        String?
  bankAccount        String?
  paypalEmail        String?
  isVerified         Boolean             @default(false)
  termsAccepted      Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  wallet             CreatorWallet?
  stripeAccount      CreatorStripeAccount?
  submissions        Submission[]
  successStories     SuccessStory[]
  winners            Winner[]
  withdrawalRequests WithdrawalRequest[]
  payouts            CreatorPayout[]
  rewardAssignments  RewardAssignment[]

  @@index([email])
  @@index([userName])
  @@index([createdAt])
}

model Brief {
  id               String           @id @default(cuid())
  title            String
  description      String
  requirements     String
  reward           Float            // Legacy field - will be calculated from reward tiers
  deadline         DateTime
  status           String           @default("draft")
  isPrivate        Boolean          @default(false)
  additionalFields String?
  brandId          String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  closedAt         DateTime?
  amountOfWinners  Int              @default(1)
  winnersSelected  Boolean          @default(false)
  location         String?
  totalRewardsPaid Float            @default(0)
  isFunded         Boolean          @default(false)
  fundedAt         DateTime?
  archivedAt       DateTime?
  // New reward tier system
  totalBudget      Float?           // Calculated from reward tiers
  rewardTiers      RewardTier[]
  rewardAssignments RewardAssignment[]
  briefStatuses    BriefStatus[]
  awardDrafts      AwardDraft[]
  brand            Brand            @relation(fields: [brandId], references: [id])
  publishedAwards  PublishedAward[]
  rewardPool       RewardPool?
  submissions      Submission[]
  winners          Winner[]
  winnerRewards    WinnerReward[]
  funding          BriefFunding?
  refunds          BriefRefund[]    @relation("BriefRefunds")
  payouts          CreatorPayout[]  @relation("BriefPayouts")
}

model Submission {
  id          String    @id @default(cuid())
  briefId     String
  creatorId   String
  content     String
  files       String?
  amount      Float
  status      String    @default("pending")
  submittedAt DateTime  @default(now())
  reviewedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  brief       Brief     @relation(fields: [briefId], references: [id])
  creator     Creator   @relation(fields: [creatorId], references: [id])
  winner      Winner?
  payouts     CreatorPayout[]
  rewardAssignment RewardAssignment?
}

model AwardDraft {
  id          String   @id @default(cuid())
  briefId     String
  brandId     String
  rewardTiers String
  savedAt     DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brand       Brand    @relation(fields: [brandId], references: [id])
  brief       Brief    @relation(fields: [briefId], references: [id])
}

model PublishedAward {
  id          String   @id @default(cuid())
  briefId     String
  brandId     String
  rewardTiers String
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brand       Brand    @relation(fields: [brandId], references: [id])
  brief       Brief    @relation(fields: [briefId], references: [id])
}

model Admin {
  id            String              @id @default(cuid())
  email         String              @unique
  password      String
  fullName      String
  role          String              @default("admin")
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  notifications AdminNotification[]
  auditLogs     AuditLog[]

  @@index([email])
  @@index([role])
}

model AuditLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  details    String
  targetType String?
  targetId   String?
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  admin      Admin    @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([action])
  @@index([targetType])
  @@index([timestamp])
}

model AdminNotification {
  id        String    @id @default(cuid())
  adminId   String
  title     String
  message   String
  type      String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  admin     Admin     @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([isRead])
  @@index([createdAt])
}

model Winner {
  id           String        @id @default(cuid())
  briefId      String
  submissionId String        @unique
  creatorId    String
  position     Int
  selectedAt   DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  rewardId     String?       @unique
  payment      Payment?
  brief        Brief         @relation(fields: [briefId], references: [id])
  creator      Creator       @relation(fields: [creatorId], references: [id])
  reward       WinnerReward? @relation(fields: [rewardId], references: [id])
  submission   Submission    @relation(fields: [submissionId], references: [id])
}

model WinnerReward {
  id               String    @id @default(cuid())
  briefId          String
  position         Int
  cashAmount       Float     @default(0)
  creditAmount     Float     @default(0)
  prizeDescription String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isPaid           Boolean   @default(false)
  paidAt           DateTime?
  calculatedAmount Float     @default(0)
  winner           Winner?
  brief            Brief     @relation(fields: [briefId], references: [id])
}

model Notification {
  id                String                 @id @default(cuid())
  userId            String
  userType          String
  title             String
  message           String
  type              String
  isRead            Boolean                @default(false)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  actionText        String?
  actionUrl         String?
  category          String                 @default("general")
  dismissedAt       DateTime?
  expiresAt         DateTime?
  metadata          Json?
  priority          String                 @default("normal")
  readAt            DateTime?
  relatedEntityId   String?
  relatedEntityType String?
  deliveries        NotificationDelivery[]

  @@index([userId, userType])
  @@index([isRead])
  @@index([createdAt])
  @@index([category])
  @@index([priority])
  @@index([readAt])
  @@index([dismissedAt])
  @@index([expiresAt])
  @@index([relatedEntityType, relatedEntityId])
  @@index([userType, category])
  @@index([userId, isRead])
}

model NotificationPreferences {
  id                 String   @id @default(cuid())
  userId             String
  userType           String
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  inAppNotifications Boolean  @default(true)
  categories         Json     @default("{\"brief\": true, \"reward\": true, \"system\": true, \"wallet\": true, \"winner\": true, \"general\": true, \"payment\": true, \"security\": true, \"invitation\": true, \"submission\": true}")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, userType])
  @@index([userId, userType])
}

model NotificationTemplate {
  id                String   @id @default(cuid())
  name              String   @unique
  type              String
  category          String
  titleTemplate     String
  messageTemplate   String
  actionText        String?
  actionUrlTemplate String?
  priority          String   @default("normal")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([type])
  @@index([category])
  @@index([isActive])
}

model NotificationDelivery {
  id             String       @id @default(cuid())
  notificationId String
  deliveryMethod String
  status         String
  deliveredAt    DateTime?
  errorMessage   String?
  createdAt      DateTime     @default(now())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([status])
  @@index([deliveredAt])
}

model Payment {
  id                    String    @id @default(cuid())
  winnerId              String    @unique
  amount                Float
  currency              String    @default("USD")
  paymentMethod         String
  rewardType            String
  status                String    @default("pending")
  stripePaymentIntentId String?
  stripeTransferId      String?
  paidAt                DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  winner                Winner    @relation(fields: [winnerId], references: [id])
}

model CreatorWallet {
  id             String              @id @default(cuid())
  creatorId      String              @unique
  balance        Float               @default(0)
  totalEarned    Float               @default(0)
  totalWithdrawn Float               @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  creator        Creator             @relation(fields: [creatorId], references: [id])
  transactions   WalletTransaction[]
}

model CreatorStripeAccount {
  id               String    @id @default(cuid())
  creatorId        String    @unique
  stripeAccountId  String    @unique
  status           String    @default("pending") // pending, restricted, active
  chargesEnabled   Boolean   @default(false)
  payoutsEnabled   Boolean   @default(false)
  detailsSubmitted Boolean   @default(false)
  requirements     Json?     // Store Stripe requirements as JSON
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  creator          Creator   @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
  @@index([stripeAccountId])
  @@index([status])
}

model WalletTransaction {
  id            String        @id @default(cuid())
  walletId      String
  type          String
  amount        Float
  description   String
  referenceId   String?
  balanceBefore Float
  balanceAfter  Float
  createdAt     DateTime      @default(now())
  wallet        CreatorWallet @relation(fields: [walletId], references: [id])
}

model BrandWallet {
  id             String                   @id @default(cuid())
  brandId        String                   @unique
  balance        Float                    @default(0)
  totalSpent     Float                    @default(0)
  totalDeposited Float                    @default(0)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  brand          Brand                    @relation(fields: [brandId], references: [id])
  transactions   BrandWalletTransaction[]
}

model BrandWalletTransaction {
  id            String      @id @default(cuid())
  walletId      String
  type          String
  amount        Float
  description   String
  referenceId   String?
  balanceBefore Float
  balanceAfter  Float
  createdAt     DateTime    @default(now())
  wallet        BrandWallet @relation(fields: [walletId], references: [id])
}

model RewardPool {
  id              String   @id @default(cuid())
  briefId         String   @unique
  totalAmount     Float
  remainingAmount Float
  status          String   @default("active")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  brief           Brief    @relation(fields: [briefId], references: [id])

  @@index([status])
  @@index([createdAt])
}

model Transaction {
  id                    String   @id @default(cuid())
  userId                String
  userType              String
  type                  String
  amount                Float
  stripePaymentIntentId String?
  stripeTransferId      String?
  status                String   @default("pending")
  createdAt             DateTime @default(now())

  @@index([userId, userType])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model WithdrawalRequest {
  id               String    @id @default(cuid())
  creatorId        String
  amount           Float
  currency         String    @default("USD")
  status           String    @default("pending")
  reason           String?
  adminNotes       String?
  stripeTransferId String?
  requestedAt      DateTime  @default(now())
  processedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  creator          Creator   @relation(fields: [creatorId], references: [id])

  @@index([status])
  @@index([creatorId])
  @@index([requestedAt])
}

model StripeConnectAccount {
  id               String   @id @default(cuid())
  creatorId        String   @unique
  stripeAccountId  String   @unique
  status           String   @default("pending")
  chargesEnabled   Boolean  @default(false)
  payoutsEnabled   Boolean  @default(false)
  detailsSubmitted Boolean  @default(false)
  requirements     Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([status])
  @@index([chargesEnabled])
  @@index([payoutsEnabled])
}

model BriefFunding {
  id                      String    @id @default(cuid())
  briefId                 String    @unique
  brandId                 String
  totalAmount             Decimal   @db.Decimal(10, 2)
  platformFee             Decimal   @default(0) @db.Decimal(10, 2)
  netAmount               Decimal   @db.Decimal(10, 2)
  stripePaymentIntentId   String?
  stripeCheckoutSessionId String?
  status                  String    @default("pending")
  fundedAt                DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Relations
  brief   Brief           @relation(fields: [briefId], references: [id], onDelete: Cascade)
  brand   Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  payouts CreatorPayout[] @relation("BriefFundingPayouts")
  refunds BriefRefund[]   @relation("BriefFundingRefunds")

  @@index([brandId])
  @@index([status])
  @@index([fundedAt])
}

model CreatorPayout {
  id                    String    @id @default(cuid())
  creatorId             String
  briefId               String
  submissionId          String
  amount                Decimal   @db.Decimal(10, 2)
  platformFee           Decimal   @default(0) @db.Decimal(10, 2)
  netAmount             Decimal   @db.Decimal(10, 2)
  stripeTransferId      String?
  stripeTransferGroupId String?
  status                String    @default("pending")
  paidAt                DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  creator       Creator      @relation(fields: [creatorId], references: [id])
  brief         Brief        @relation("BriefPayouts", fields: [briefId], references: [id], map: "CreatorPayout_brief_fkey")
  submission    Submission   @relation(fields: [submissionId], references: [id])
  briefFunding  BriefFunding @relation("BriefFundingPayouts", fields: [briefId], references: [briefId], map: "CreatorPayout_briefFunding_fkey")

  @@index([creatorId])
  @@index([briefId])
  @@index([status])
  @@index([paidAt])
}

model BriefRefund {
  id             String    @id @default(cuid())
  briefId        String
  brandId        String
  amount         Decimal   @db.Decimal(10, 2)
  stripeRefundId String?
  reason         String?
  status         String    @default("pending")
  processedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  brief         Brief        @relation("BriefRefunds", fields: [briefId], references: [id], map: "BriefRefund_brief_fkey")
  brand         Brand        @relation(fields: [brandId], references: [id], map: "BriefRefund_brand_fkey")
  briefFunding  BriefFunding @relation("BriefFundingRefunds", fields: [briefId], references: [briefId], map: "BriefRefund_briefFunding_fkey")

  @@index([briefId])
  @@index([brandId])
  @@index([status])
  @@index([processedAt])
}

model Conversation {
  id               String    @id @default(cuid())
  participant1Id   String
  participant2Id   String
  participant1Type String
  participant2Type String
  lastMessageAt    DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  messages         Message[]

  @@unique([participant1Id, participant2Id])
  @@index([participant1Id])
  @@index([participant2Id])
  @@index([lastMessageAt])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String
  senderType     String
  receiverType   String
  content        String
  type           MessageType  @default(TEXT)
  fileName       String?
  fileUrl        String?
  fileSize       Int?
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model Event {
  id               String              @id @default(cuid())
  title            String
  description      String
  type             String
  category         String
  hostId           String
  date             DateTime
  time             String
  duration         String
  timezone         String
  maxAttendees     Int
  currentAttendees Int                 @default(0)
  price            Float               @default(0)
  currency         String              @default("USD")
  isFree           Boolean             @default(true)
  isLive           Boolean             @default(false)
  isRecorded       Boolean             @default(false)
  recordingUrl     String?
  meetingUrl       String?
  tags             String[]
  requirements     String[]
  learningOutcomes String[]
  agenda           Json                @default("[]")
  featured         Boolean             @default(false)
  status           String              @default("upcoming")
  views            Int                 @default(0)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  host             User                @relation(fields: [hostId], references: [id])
  attendees        EventRegistration[]

  @@index([date])
  @@index([status])
  @@index([type])
  @@index([category])
  @@index([featured])
}

model EventRegistration {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model ForumPost {
  id           String          @id @default(cuid())
  title        String
  content      String
  authorId     String
  category     String
  tags         String[]
  likes        Int             @default(0)
  replies      Int             @default(0)
  views        Int             @default(0)
  isPinned     Boolean         @default(false)
  isLocked     Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  author       User            @relation(fields: [authorId], references: [id])
  forumLikes   ForumPostLike[]
  forumReplies ForumReply[]

  @@index([category])
  @@index([isPinned])
  @@index([createdAt])
  @@index([authorId])
}

model ForumReply {
  id         String           @id @default(cuid())
  postId     String
  authorId   String
  content    String
  likes      Int              @default(0)
  isSolution Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  author     User             @relation(fields: [authorId], references: [id])
  post       ForumPost        @relation(fields: [postId], references: [id], onDelete: Cascade)
  forumLikes ForumReplyLike[]

  @@index([postId])
  @@index([authorId])
  @@index([createdAt])
}

model ForumPostLike {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime  @default(now())
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model ForumReplyLike {
  id        String     @id @default(cuid())
  replyId   String
  userId    String
  createdAt DateTime   @default(now())
  reply     ForumReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([replyId, userId])
  @@index([replyId])
  @@index([userId])
}

model SuccessStory {
  id          String   @id @default(cuid())
  title       String
  description String
  briefTitle  String
  brandId     String
  creatorId   String
  category    String
  budget      Float
  duration    String
  outcome     String
  metrics     Json     @default("{}")
  testimonial Json     @default("{}")
  images      String[]
  tags        String[]
  featured    Boolean  @default(false)
  verified    Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brand       Brand    @relation(fields: [brandId], references: [id])
  creator     Creator  @relation(fields: [creatorId], references: [id])

  @@index([category])
  @@index([featured])
  @@index([verified])
  @@index([createdAt])
}

model User {
  id                 String              @id @default(cuid())
  name               String
  type               String
  avatar             String?
  bio                String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  hostedEvents       Event[]
  eventRegistrations EventRegistration[]
  forumPosts         ForumPost[]
  forumPostLikes     ForumPostLike[]
  forumReplies       ForumReply[]
  forumReplyLikes    ForumReplyLike[]

  @@index([type])
  @@index([name])
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  VIDEO
}

// New Reward Tier System Models
model RewardTier {
  id          String   @id @default(cuid())
  briefId     String
  tierNumber  Int
  name        String
  description String?
  amount      Decimal  @db.Decimal(10, 2)
  position    Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  brief           Brief             @relation(fields: [briefId], references: [id], onDelete: Cascade)
  rewardAssignments RewardAssignment[]

  @@unique([briefId, tierNumber])
  @@index([briefId])
  @@index([tierNumber])
  @@index([position])
}

model RewardAssignment {
  id              String    @id @default(cuid())
  briefId         String
  rewardTierId    String    @unique
  creatorId       String
  submissionId    String    @unique
  assignedAt     DateTime  @default(now())
  assignedBy     String
  status          String    @default("assigned") // assigned, confirmed, completed
  payoutStatus    String    @default("pending") // pending, processing, paid, failed
  stripeTransferId String?
  paidAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  brief        Brief      @relation(fields: [briefId], references: [id], onDelete: Cascade)
  rewardTier   RewardTier @relation(fields: [rewardTierId], references: [id], onDelete: Cascade)
  creator      Creator    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([briefId])
  @@index([creatorId])
  @@index([rewardTierId])
  @@index([status])
  @@index([payoutStatus])
}

model BriefStatus {
  id        String   @id @default(cuid())
  briefId   String
  status    String   // draft, funded, winners_selected, payouts_completed, closed
  updatedAt DateTime @default(now())
  updatedBy String
  notes     String?

  // Relations
  brief Brief @relation(fields: [briefId], references: [id], onDelete: Cascade)

  @@index([briefId])
  @@index([status])
}
